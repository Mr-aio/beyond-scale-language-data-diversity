text
"informal statement $\text{to\_fract}(0) = 0$. formal statement lemma to_fract_0 [simp]: ""to_fract 0 = 0"""
"informal statement The fractional part of $1$ is $1$. formal statement lemma to_fract_1 [simp]: ""to_fract 1 = 1"""
"informal statement The fractional part of the sum of two real numbers is the sum of the fractional parts of the two real numbers. formal statement lemma to_fract_add [simp]: ""to_fract (x + y) = to_fract x + to_fract y"""
"informal statement The difference of two fractions is equal to the difference of their numerators divided by the product of their denominators. formal statement lemma to_fract_diff [simp]: ""to_fract (x - y) = to_fract x - to_fract y"""
"informal statement The negation of a fraction is the negation of the numerator divided by the denominator. formal statement lemma to_fract_uminus [simp]: ""to_fract (-x) = -to_fract x"""
"informal statement The fractional part of a product is the product of the fractional parts. formal statement lemma to_fract_mult [simp]: ""to_fract (x * y) = to_fract x * to_fract y"""
"informal statement The function to_fract is injective. formal statement lemma to_fract_eq_iff [simp]: ""to_fract x = to_fract y \<longleftrightarrow> x = y"""
"informal statement The fractional part of a real number is zero if and only if the real number is zero. formal statement lemma to_fract_eq_0_iff [simp]: ""to_fract x = 0 \<longleftrightarrow> x = 0"""
"informal statement The denominator of a fraction is never zero. formal statement lemma snd_quot_of_fract_nonzero [simp]: ""snd (quot_of_fract x) \<noteq> 0"""
"informal statement The fractional part of a fraction is the fraction itself. formal statement lemma Fract_quot_of_fract [simp]: ""Fract (fst (quot_of_fract x)) (snd (quot_of_fract x)) = x"""
"informal statement If the denominator of the rational number $x$ is $1$, then the numerator of $x$ is $x$ itself. formal statement lemma to_fract_quot_of_fract: assumes ""snd (quot_of_fract x) = 1"" shows ""to_fract (fst (quot_of_fract x)) = x"""
"informal statement If $y$ divides $x$, then the denominator of the fraction $x/y$ is $1$. formal statement lemma snd_quot_of_fract_Fract_whole: assumes ""y dvd x"" shows ""snd (quot_of_fract (Fract x y)) = 1"""
"informal statement The fraction $a/b$ is equal to the fraction $to\_fract(a)/to\_fract(b)$. formal statement lemma Fract_conv_to_fract: ""Fract a b = to_fract a / to_fract b"""
"informal statement The quotient of a fraction is equal to the fraction itself. formal statement lemma quot_of_fract_to_fract [simp]: ""quot_of_fract (to_fract x) = (x, 1)"""
"informal statement The first component of the quotient of a fraction is zero if and only if the fraction is zero. formal statement lemma fst_quot_of_fract_eq_0_iff [simp]: ""fst (quot_of_fract x) = 0 \<longleftrightarrow> x = 0"""
"informal statement The denominator of the fractional representation of a rational number is 1. formal statement lemma snd_quot_of_fract_to_fract [simp]: ""snd (quot_of_fract (to_fract x)) = 1"""
"informal statement The numerator and denominator of a fraction are coprime. formal statement lemma coprime_quot_of_fract: ""coprime (fst (quot_of_fract x)) (snd (quot_of_fract x))"""
"informal statement The unit factor of the denominator of a fraction is 1. formal statement lemma unit_factor_snd_quot_of_fract: ""unit_factor (snd (quot_of_fract x)) = 1"""
"informal statement If the unit factor of $x$ is 1, then $x$ is already normalized. formal statement lemma unit_factor_1_imp_normalized: ""unit_factor x = 1 \<Longrightarrow> normalize x = x"""
"informal statement The normalization of the denominator of a fraction is the same as the denominator of the fraction. formal statement lemma normalize_snd_quot_of_fract: ""normalize (snd (quot_of_fract x)) = snd (quot_of_fract x)"""
"informal statement If $p$ is a polynomial and $c$ is a rational number, then the polynomial $cp$ is equal to the rational number $c$ times the polynomial $p$. formal statement lemma fract_poly_smult [simp]: ""fract_poly (smult c p) = smult (to_fract c) (fract_poly p)"""
"informal statement The fractional polynomial of degree 0 is 0. formal statement lemma fract_poly_0 [simp]: ""fract_poly 0 = 0"""
"informal statement The fractional polynomial $1$ is equal to $1$. formal statement lemma fract_poly_1 [simp]: ""fract_poly 1 = 1"""
"informal statement The fractional part of a sum of two polynomials is the sum of the fractional parts of the polynomials. formal statement lemma fract_poly_add [simp]: ""fract_poly (p + q) = fract_poly p + fract_poly q"""
"informal statement The fractional part of a polynomial is equal to the fractional part of the difference of the polynomial and its integer part. formal statement lemma fract_poly_diff [simp]: ""fract_poly (p - q) = fract_poly p - fract_poly q"""
"informal statement The fractional part of a sum is the sum of the fractional parts. formal statement lemma to_fract_sum [simp]: ""to_fract (sum f A) = sum (\<lambda>x. to_fract (f x)) A"""
"informal statement The fractional part of a product of two polynomials is equal to the product of the fractional parts of the two polynomials. formal statement lemma fract_poly_mult [simp]: ""fract_poly (p * q) = fract_poly p * fract_poly q"""
"informal statement Two polynomials are equal if and only if their fractional parts are equal. formal statement lemma fract_poly_eq_iff [simp]: ""fract_poly p = fract_poly q \<longleftrightarrow> p = q"""
"informal statement A fractional polynomial is zero if and only if its numerator is zero. formal statement lemma fract_poly_eq_0_iff [simp]: ""fract_poly p = 0 \<longleftrightarrow> p = 0"""
"informal statement If $p$ divides $q$, then $\frac{p}{1}$ divides $\frac{q}{1}$. formal statement lemma fract_poly_dvd: ""p dvd q \<Longrightarrow> fract_poly p dvd fract_poly q"""
"informal statement The product of the polynomials $f(x)$ for $x$ in a multiset $A$ is equal to the product of the polynomials $f(x)$ for $x$ in the multiset $A$ with the coefficients converted to fractions. formal statement lemma prod_mset_fract_poly: ""(\<Prod>x\<in>#A. map_poly to_fract (f x)) = fract_poly (prod_mset (image_mset f A))"""
